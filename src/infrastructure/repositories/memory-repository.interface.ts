import { Memory } from "@/domain/entities/memory.ts";
import { Embedding } from "@/domain/entities/embedding.ts";

/**
 * Repository interface for Memory persistence operations.
 *
 * Provides database-agnostic abstraction for storing and retrieving Memory objects
 * with full multi-tenant isolation. This interface can be implemented by various
 * database backends including PostgreSQL, DuckDB, or vector stores.
 *
 * @example
 * ```typescript
 * const repository: MemoryRepository = new PostgresMemoryRepository(client);
 * await repository.save(memory, tenantId);
 * const similar = await repository.findSimilar(embedding, 0.8, tenantId);
 * ```
 */
export interface MemoryRepository {
  /**
   * Persist a Memory object to the repository.
   *
   * @param memory - The Memory object to save, including all related entities
   * @param tenantId - UUID identifying the tenant for multi-tenant isolation
   * @throws {ValidationError} When memory fails domain validation
   * @throws {DatabaseError} When persistence operation fails
   */
  save(memory: Memory, tenantId: string): Promise<void>;

  /**
   * Retrieve a Memory by its unique identifier.
   *
   * @param id - The unique identifier of the memory
   * @param tenantId - UUID identifying the tenant for access control
   * @returns The Memory object if found, null otherwise
   */
  findById(id: string, tenantId: string): Promise<Memory | null>;

  /**
   * Find a Memory by its content hash for deduplication.
   *
   * @param hash - The content hash generated by Memory.generateContentHash()
   * @param tenantId - UUID identifying the tenant for access control
   * @returns The Memory object if found, null otherwise
   */
  findByContentHash(hash: string, tenantId: string): Promise<Memory | null>;

  /**
   * Find semantically similar memories using vector similarity search.
   *
   * Implements the "Splashback" feature by finding memories with similarity
   * scores above the specified threshold. Requires the memory to have an
   * embedding for comparison.
   *
   * @param embedding - The embedding vector to compare against
   * @param threshold - Minimum similarity threshold (0.0 to 1.0)
   * @param tenantId - UUID identifying the tenant for access control
   * @param limit - Maximum number of results to return (default: 10)
   * @returns Array of memories with their similarity scores, ordered by relevance
   */
  findSimilar(
    embedding: Embedding,
    threshold: number,
    tenantId: string,
    limit?: number,
  ): Promise<Array<{ memory: Memory; similarity: number }>>;

  /**
   * Search memories using full-text search on content.
   *
   * @param query - The search query string
   * @param tenantId - UUID identifying the tenant for access control
   * @param limit - Maximum number of results to return (default: 50)
   * @returns Array of memories matching the search query
   */
  search(query: string, tenantId: string, limit?: number): Promise<Memory[]>;

  /**
   * Retrieve all memories for a tenant with pagination support.
   *
   * @param tenantId - UUID identifying the tenant for access control
   * @param limit - Maximum number of results to return (default: 100)
   * @param offset - Number of records to skip for pagination (default: 0)
   * @returns Array of memories ordered by creation date (newest first)
   */
  findAll(tenantId: string, limit?: number, offset?: number): Promise<Memory[]>;

  /**
   * Delete a Memory from the repository.
   *
   * @param id - The unique identifier of the memory to delete
   * @param tenantId - UUID identifying the tenant for access control
   * @returns True if the memory was deleted, false if not found
   */
  delete(id: string, tenantId: string): Promise<boolean>;
}
