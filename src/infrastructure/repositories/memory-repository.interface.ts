import { Memory } from "@/domain/entities/memory.ts";
import { Embedding } from "@/domain/entities/embedding.ts";
import { Transaction } from "@db/postgres";

/**
 * Supported similarity metrics for vector search operations.
 *
 * Each metric has different mathematical properties:
 * - cosine: Measures angle between vectors, normalized to [-1, 1]
 * - euclidean: Measures geometric distance in n-dimensional space
 * - dot: Inner product of vectors, sensitive to magnitude
 */
export type SimilarityMetric = "cosine" | "euclidean" | "dot";

/**
 * Result from vector similarity search with explicit distance/similarity scoring.
 *
 * Provides both raw distance from the underlying vector index and normalized
 * similarity scores to avoid ambiguity across different backend implementations.
 */
export interface SimilarResult {
  /** The Memory object that matched the similarity search */
  memory: Memory;

  /**
   * Raw distance from the vector index (lower is better).
   * - cosine distance: 0.0 (identical) to 2.0 (opposite)
   * - euclidean distance: 0.0 (identical) to infinity
   * - dot distance: negative infinity to positive infinity
   */
  distance?: number;

  /**
   * Normalized similarity score (higher is better).
   * Always in range [0.0, 1.0] where:
   * - 1.0 = identical vectors
   * - 0.5 = moderate similarity
   * - 0.0 = maximum dissimilarity
   */
  similarity: number;
}

/**
 * Options for repository save operations.
 */
export interface SaveOptions {
  /** UUID identifying the tenant for multi-tenant isolation */
  tenantId: string;
  /** Optional transaction to use for the operation */
  tx?: Transaction;
}

/**
 * Options for repository query operations.
 */
export interface QueryOptions {
  /** UUID identifying the tenant for multi-tenant isolation */
  tenantId: string;
}

/**
 * Repository interface for Memory persistence operations.
 *
 * Provides database-agnostic abstraction for storing and retrieving Memory objects
 * with full multi-tenant isolation. Uses explicit options objects to make tenant
 * context and transaction usage obvious and harder to misuse.
 *
 * @example
 * ```typescript
 * // Single atomic operation
 * const repository: MemoryRepository = new PostgresMemoryRepository(client);
 * await repository.save(memory, { tenantId });
 *
 * // Explicit transaction usage
 * const transaction = client.createTransaction('save-batch');
 * await transaction.begin();
 * try {
 *   await repository.save(memory1, { tenantId, tx: transaction });
 *   await repository.save(memory2, { tenantId, tx: transaction });
 *   await transaction.commit();
 * } catch (error) {
 *   await transaction.rollback();
 *   throw error;
 * }
 * ```
 */
export interface MemoryRepository {
  /**
   * Persist a Memory object to the repository as a single atomic operation.
   *
   * Saves the memory and all related entities (tags, entities, actions, embedding,
   * source) in a single transaction. If options.tx is provided, uses that transaction;
   * otherwise creates a new transaction internally.
   *
   * @param memory - The Memory object to save, including all related entities
   * @param options - Save options including tenant context and optional transaction
   * @throws {ValidationError} Memory fails domain validation
   * @throws {DatabaseError} Persistence operation fails
   */
  save(memory: Memory, options: SaveOptions): Promise<void>;

  /**
   * Retrieve a Memory by its unique identifier.
   *
   * @param id - The unique identifier of the memory
   * @param options - Query options including tenant context
   * @returns The Memory object if found, null otherwise
   */
  findById(id: string, options: QueryOptions): Promise<Memory | null>;

  /**
   * Find a Memory by its content hash for deduplication.
   *
   * @param hash - The content hash generated by Memory.generateContentHash()
   * @param options - Query options including tenant context
   * @returns The Memory object if found, null otherwise
   */
  findByContentHash(
    hash: string,
    options: QueryOptions,
  ): Promise<Memory | null>;

  /**
   * Find semantically similar memories using vector similarity search.
   *
   * Implements the "Splashback" feature by finding memories with similarity
   * scores above the specified threshold. Returns both raw distance and normalized
   * similarity to provide maximum transparency across different vector backends.
   *
   * **IMPORTANT**: Query embedding and stored embeddings must be generated by the
   * same model and have identical dimensions for meaningful comparisons. Mixing
   * embeddings from different models (e.g., OpenAI text-embedding-3-small vs
   * Ollama nomic-embed-text) will produce meaningless results.
   *
   * @param embedding - The embedding vector to compare against (must match stored model)
   * @param threshold - Minimum similarity threshold in range [0.0, 1.0] (higher = more similar)
   * @param options - Query options including tenant context
   * @param limit - Maximum number of results to return (default: 10)
   * @param metric - Vector similarity metric to use (default: "cosine")
   * @returns Array of similar memories with distance/similarity scores, ordered by relevance (best first)
   * @throws {ValidationError} Embedding dimensions don't match stored embeddings
   * @throws {DatabaseError} Vector search operation fails
   */
  findSimilar(
    embedding: Embedding,
    threshold: number,
    options: QueryOptions,
    limit?: number,
    metric?: SimilarityMetric,
  ): Promise<ReadonlyArray<SimilarResult>>;

  /**
   * Search memories using full-text search on content.
   *
   * @param query - The search query string
   * @param options - Query options including tenant context
   * @param limit - Maximum number of results to return (default: 50)
   * @returns Array of memories matching the search query
   */
  search(
    query: string,
    options: QueryOptions,
    limit?: number,
  ): Promise<Memory[]>;

  /**
   * Retrieve all memories for a tenant with pagination support.
   *
   * @param options - Query options including tenant context
   * @param limit - Maximum number of results to return (default: 100)
   * @param offset - Number of records to skip for pagination (default: 0)
   * @returns Array of memories ordered by creation date (newest first)
   */
  findAll(
    options: QueryOptions,
    limit?: number,
    offset?: number,
  ): Promise<Memory[]>;

  /**
   * Delete a Memory from the repository.
   *
   * @param id - The unique identifier of the memory to delete
   * @param options - Query options including tenant context
   * @returns True if the memory was deleted, false if not found
   */
  delete(id: string, options: QueryOptions): Promise<boolean>;
}
